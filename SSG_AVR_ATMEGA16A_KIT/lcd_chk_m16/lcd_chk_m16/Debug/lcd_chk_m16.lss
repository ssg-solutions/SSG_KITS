
lcd_chk_m16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000002fe  00000372  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000392  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e21  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007de  00000000  00000000  00001289  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000067e  00000000  00000000  00001a67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  000020e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e8  00000000  00000000  000021b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006b8  00000000  00000000  000025a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002c58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ef       	ldi	r30, 0xFE	; 254
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 21 01 	call	0x242	; 0x242 <main>
  7a:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
  82:	87 b3       	in	r24, 0x17	; 23
  84:	8f 70       	andi	r24, 0x0F	; 15
  86:	87 bb       	out	0x17, r24	; 23

	//change LCD mode
	SET_RW();		//Read mode
  88:	c1 9a       	sbi	0x18, 1	; 24
	CLEAR_RS();		//Read status
  8a:	c0 98       	cbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	00 00       	nop

	
	do
	{

		SET_E();
  8e:	c2 9a       	sbi	0x18, 2	; 24
  90:	00 00       	nop

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
  92:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
  94:	80 7f       	andi	r24, 0xF0	; 240
  96:	00 00       	nop

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
  98:	c2 98       	cbi	0x18, 2	; 24
  9a:	00 00       	nop
		_delay_us(1);	//tEL

		SET_E();
  9c:	c2 9a       	sbi	0x18, 2	; 24
  9e:	00 00       	nop
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
  a0:	96 b3       	in	r25, 0x16	; 22
  a2:	00 00       	nop
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
  a4:	c2 98       	cbi	0x18, 2	; 24
  a6:	00 00       	nop
		_delay_us(1);	//tEL
	}while(busy);
  a8:	88 23       	and	r24, r24
  aa:	8c f3       	brlt	.-30     	; 0x8e <LCDBusyLoop+0xc>

	CLEAR_RW();		//write mode
  ac:	c1 98       	cbi	0x18, 1	; 24
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
  ae:	87 b3       	in	r24, 0x17	; 23
  b0:	80 6f       	ori	r24, 0xF0	; 240
  b2:	87 bb       	out	0x17, r24	; 23
  b4:	08 95       	ret

000000b6 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
  b6:	38 2f       	mov	r19, r24
  b8:	32 95       	swap	r19
  ba:	3f 70       	andi	r19, 0x0F	; 15
ln=(c & 0x0F);
  bc:	98 2f       	mov	r25, r24
  be:	9f 70       	andi	r25, 0x0F	; 15

if(isdata==0)
  c0:	61 11       	cpse	r22, r1
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <LCDByte+0x12>
	CLEAR_RS();
  c4:	c0 98       	cbi	0x18, 0	; 24
  c6:	01 c0       	rjmp	.+2      	; 0xca <LCDByte+0x14>
else
	SET_RS();
  c8:	c0 9a       	sbi	0x18, 0	; 24
  ca:	00 00       	nop

_delay_us(0.500);		//tAS

SET_E();
  cc:	c2 9a       	sbi	0x18, 2	; 24

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
  ce:	28 b3       	in	r18, 0x18	; 24
  d0:	82 2f       	mov	r24, r18
  d2:	8f 70       	andi	r24, 0x0F	; 15
  d4:	40 e1       	ldi	r20, 0x10	; 16
  d6:	34 9f       	mul	r19, r20
  d8:	90 01       	movw	r18, r0
  da:	11 24       	eor	r1, r1
  dc:	28 2b       	or	r18, r24
LCD_DATA_PORT=temp;
  de:	28 bb       	out	0x18, r18	; 24
  e0:	00 00       	nop

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
  e2:	c2 98       	cbi	0x18, 2	; 24
  e4:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
  e6:	c2 9a       	sbi	0x18, 2	; 24

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
  e8:	88 b3       	in	r24, 0x18	; 24
  ea:	28 2f       	mov	r18, r24
  ec:	2f 70       	andi	r18, 0x0F	; 15
  ee:	30 e1       	ldi	r19, 0x10	; 16
  f0:	93 9f       	mul	r25, r19
  f2:	c0 01       	movw	r24, r0
  f4:	11 24       	eor	r1, r1
  f6:	82 2b       	or	r24, r18

LCD_DATA_PORT=temp;
  f8:	88 bb       	out	0x18, r24	; 24
  fa:	00 00       	nop

_delay_us(1);			//tEH

//SEND

CLEAR_E();
  fc:	c2 98       	cbi	0x18, 2	; 24
  fe:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
 100:	0e 94 41 00 	call	0x82	; 0x82 <LCDBusyLoop>
 104:	08 95       	ret

00000106 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 106:	cf 93       	push	r28
 108:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	8b e4       	ldi	r24, 0x4B	; 75
 10c:	9d e1       	ldi	r25, 0x1D	; 29
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <LCDInit+0x8>
 112:	00 c0       	rjmp	.+0      	; 0x114 <LCDInit+0xe>
 114:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 116:	87 b3       	in	r24, 0x17	; 23
 118:	80 6f       	ori	r24, 0xF0	; 240
 11a:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
 11c:	ba 9a       	sbi	0x17, 2	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 11e:	b8 9a       	sbi	0x17, 0	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 120:	b9 9a       	sbi	0x17, 1	; 23

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 122:	88 b3       	in	r24, 0x18	; 24
 124:	8f 70       	andi	r24, 0x0F	; 15
 126:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
 128:	c2 98       	cbi	0x18, 2	; 24
	CLEAR_RW();
 12a:	c1 98       	cbi	0x18, 1	; 24
	CLEAR_RS();
 12c:	c0 98       	cbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 130:	c2 9a       	sbi	0x18, 2	; 24
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 132:	c5 9a       	sbi	0x18, 5	; 24
 134:	00 00       	nop
	_delay_us(1);
	CLEAR_E();
 136:	c2 98       	cbi	0x18, 2	; 24
 138:	00 00       	nop
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 13a:	0e 94 41 00 	call	0x82	; 0x82 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	8c 2f       	mov	r24, r28
 142:	8c 60       	ori	r24, 0x0C	; 12
 144:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	88 e2       	ldi	r24, 0x28	; 40
 14c:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCDByte>
}
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 15a:	88 81       	ld	r24, Y
 15c:	88 23       	and	r24, r24
 15e:	39 f0       	breq	.+14     	; 0x16e <LCDWriteString+0x1a>
 160:	21 96       	adiw	r28, 0x01	; 1
 {
	LCDData(*msg);
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCDByte>
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 168:	89 91       	ld	r24, Y+
 16a:	81 11       	cpse	r24, r1
 16c:	fa cf       	rjmp	.-12     	; 0x162 <LCDWriteString+0xe>
 {
	LCDData(*msg);
	msg++;
 }
}
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 174:	ef 92       	push	r14
 176:	ff 92       	push	r15
 178:	0f 93       	push	r16
 17a:	1f 93       	push	r17
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	00 d0       	rcall	.+0      	; 0x182 <LCDWriteInt+0xe>
 182:	00 d0       	rcall	.+0      	; 0x184 <LCDWriteInt+0x10>
 184:	1f 92       	push	r1
 186:	cd b7       	in	r28, 0x3d	; 61
 188:	de b7       	in	r29, 0x3e	; 62
 18a:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 18c:	fe 01       	movw	r30, r28
 18e:	31 96       	adiw	r30, 0x01	; 1
 190:	25 e0       	ldi	r18, 0x05	; 5
 192:	df 01       	movw	r26, r30
 194:	1d 92       	st	X+, r1
 196:	2a 95       	dec	r18
 198:	e9 f7       	brne	.-6      	; 0x194 <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
 19a:	00 97       	sbiw	r24, 0x00	; 0
 19c:	59 f0       	breq	.+22     	; 0x1b4 <LCDWriteInt+0x40>
 19e:	35 96       	adiw	r30, 0x05	; 5
	{
	str[i]=val%10;
 1a0:	2a e0       	ldi	r18, 0x0A	; 10
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	b9 01       	movw	r22, r18
 1a6:	0e 94 55 01 	call	0x2aa	; 0x2aa <__divmodhi4>
 1aa:	82 93       	st	-Z, r24
	val=val/10;
 1ac:	86 2f       	mov	r24, r22
 1ae:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 1b0:	00 97       	sbiw	r24, 0x00	; 0
 1b2:	c1 f7       	brne	.-16     	; 0x1a4 <LCDWriteInt+0x30>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 1b4:	bf ef       	ldi	r27, 0xFF	; 255
 1b6:	eb 16       	cp	r14, r27
 1b8:	fb 06       	cpc	r15, r27
 1ba:	69 f4       	brne	.+26     	; 0x1d6 <LCDWriteInt+0x62>
		while(str[j]==0) j++;
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	81 11       	cpse	r24, r1
 1c0:	1e c0       	rjmp	.+60     	; 0x1fe <LCDWriteInt+0x8a>
 1c2:	fe 01       	movw	r30, r28
 1c4:	32 96       	adiw	r30, 0x02	; 2
 1c6:	00 e0       	ldi	r16, 0x00	; 0
 1c8:	10 e0       	ldi	r17, 0x00	; 0
 1ca:	0f 5f       	subi	r16, 0xFF	; 255
 1cc:	1f 4f       	sbci	r17, 0xFF	; 255
 1ce:	81 91       	ld	r24, Z+
 1d0:	88 23       	and	r24, r24
 1d2:	d9 f3       	breq	.-10     	; 0x1ca <LCDWriteInt+0x56>
 1d4:	10 c0       	rjmp	.+32     	; 0x1f6 <LCDWriteInt+0x82>
	else
		j=5-field_length;
 1d6:	05 e0       	ldi	r16, 0x05	; 5
 1d8:	10 e0       	ldi	r17, 0x00	; 0
 1da:	0e 19       	sub	r16, r14
 1dc:	1f 09       	sbc	r17, r15
 1de:	0b c0       	rjmp	.+22     	; 0x1f6 <LCDWriteInt+0x82>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 1e0:	f8 01       	movw	r30, r16
 1e2:	81 91       	ld	r24, Z+
 1e4:	8f 01       	movw	r16, r30
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	80 5d       	subi	r24, 0xD0	; 208
 1ea:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 1ee:	0e 15       	cp	r16, r14
 1f0:	1f 05       	cpc	r17, r15
 1f2:	b1 f7       	brne	.-20     	; 0x1e0 <LCDWriteInt+0x6c>
 1f4:	11 c0       	rjmp	.+34     	; 0x218 <LCDWriteInt+0xa4>
 1f6:	05 30       	cpi	r16, 0x05	; 5
 1f8:	11 05       	cpc	r17, r1
 1fa:	1c f0       	brlt	.+6      	; 0x202 <LCDWriteInt+0x8e>
 1fc:	0d c0       	rjmp	.+26     	; 0x218 <LCDWriteInt+0xa4>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
 1fe:	00 e0       	ldi	r16, 0x00	; 0
 200:	10 e0       	ldi	r17, 0x00	; 0
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	8c 0f       	add	r24, r28
 208:	9d 1f       	adc	r25, r29
 20a:	08 0f       	add	r16, r24
 20c:	19 1f       	adc	r17, r25
 20e:	7e 01       	movw	r14, r28
 210:	96 e0       	ldi	r25, 0x06	; 6
 212:	e9 0e       	add	r14, r25
 214:	f1 1c       	adc	r15, r1
 216:	e4 cf       	rjmp	.-56     	; 0x1e0 <LCDWriteInt+0x6c>
	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
	}
}
 218:	0f 90       	pop	r0
 21a:	0f 90       	pop	r0
 21c:	0f 90       	pop	r0
 21e:	0f 90       	pop	r0
 220:	0f 90       	pop	r0
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	1f 91       	pop	r17
 228:	0f 91       	pop	r16
 22a:	ff 90       	pop	r15
 22c:	ef 90       	pop	r14
 22e:	08 95       	ret

00000230 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 230:	88 32       	cpi	r24, 0x28	; 40
 232:	30 f4       	brcc	.+12     	; 0x240 <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
 234:	61 11       	cpse	r22, r1
 236:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	80 68       	ori	r24, 0x80	; 128
 23c:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCDByte>
 240:	08 95       	ret

00000242 <main>:
int main(void)
{
    /* Replace with your application code */
	uint8_t i=0;
	// enable the backlight
	DDRB|=(1<<PB3);// 
 242:	bb 9a       	sbi	0x17, 3	; 23
	PORTB|=(1<<PB3);
 244:	c3 9a       	sbi	0x18, 3	; 24
	
	
	LCDInit(LS_NONE);
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	0e 94 83 00 	call	0x106	; 0x106 <LCDInit>
	LCDWriteString("LCD_Initialised!");
 24c:	80 e6       	ldi	r24, 0x60	; 96
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 aa 00 	call	0x154	; 0x154 <LCDWriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 254:	2f eb       	ldi	r18, 0xBF	; 191
 256:	87 e2       	ldi	r24, 0x27	; 39
 258:	99 e0       	ldi	r25, 0x09	; 9
 25a:	21 50       	subi	r18, 0x01	; 1
 25c:	80 40       	sbci	r24, 0x00	; 0
 25e:	90 40       	sbci	r25, 0x00	; 0
 260:	e1 f7       	brne	.-8      	; 0x25a <main+0x18>
 262:	00 c0       	rjmp	.+0      	; 0x264 <main+0x22>
 264:	00 00       	nop


int main(void)
{
    /* Replace with your application code */
	uint8_t i=0;
 266:	c0 e0       	ldi	r28, 0x00	; 0
	LCDWriteString("LCD_Initialised!");
	_delay_ms(3000);
	
    while (1) 
    {
		LCDClear();
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCDByte>
		LCDWriteString("AVR_Rocks!");
 270:	81 e7       	ldi	r24, 0x71	; 113
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 aa 00 	call	0x154	; 0x154 <LCDWriteString>
		LCDGotoXY(0,1);
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	0e 94 18 01 	call	0x230	; 0x230 <LCDGotoXY>
		LCDWriteString("i=");
 280:	8c e7       	ldi	r24, 0x7C	; 124
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 aa 00 	call	0x154	; 0x154 <LCDWriteString>
		LCDWriteInt(i,4);
 288:	64 e0       	ldi	r22, 0x04	; 4
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	8c 2f       	mov	r24, r28
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 ba 00 	call	0x174	; 0x174 <LCDWriteInt>
		
		i++;
 294:	cf 5f       	subi	r28, 0xFF	; 255
 296:	2f e3       	ldi	r18, 0x3F	; 63
 298:	8d e0       	ldi	r24, 0x0D	; 13
 29a:	93 e0       	ldi	r25, 0x03	; 3
 29c:	21 50       	subi	r18, 0x01	; 1
 29e:	80 40       	sbci	r24, 0x00	; 0
 2a0:	90 40       	sbci	r25, 0x00	; 0
 2a2:	e1 f7       	brne	.-8      	; 0x29c <main+0x5a>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <main+0x64>
 2a6:	00 00       	nop
 2a8:	df cf       	rjmp	.-66     	; 0x268 <main+0x26>

000002aa <__divmodhi4>:
 2aa:	97 fb       	bst	r25, 7
 2ac:	07 2e       	mov	r0, r23
 2ae:	16 f4       	brtc	.+4      	; 0x2b4 <__divmodhi4+0xa>
 2b0:	00 94       	com	r0
 2b2:	07 d0       	rcall	.+14     	; 0x2c2 <__divmodhi4_neg1>
 2b4:	77 fd       	sbrc	r23, 7
 2b6:	09 d0       	rcall	.+18     	; 0x2ca <__divmodhi4_neg2>
 2b8:	0e 94 69 01 	call	0x2d2	; 0x2d2 <__udivmodhi4>
 2bc:	07 fc       	sbrc	r0, 7
 2be:	05 d0       	rcall	.+10     	; 0x2ca <__divmodhi4_neg2>
 2c0:	3e f4       	brtc	.+14     	; 0x2d0 <__divmodhi4_exit>

000002c2 <__divmodhi4_neg1>:
 2c2:	90 95       	com	r25
 2c4:	81 95       	neg	r24
 2c6:	9f 4f       	sbci	r25, 0xFF	; 255
 2c8:	08 95       	ret

000002ca <__divmodhi4_neg2>:
 2ca:	70 95       	com	r23
 2cc:	61 95       	neg	r22
 2ce:	7f 4f       	sbci	r23, 0xFF	; 255

000002d0 <__divmodhi4_exit>:
 2d0:	08 95       	ret

000002d2 <__udivmodhi4>:
 2d2:	aa 1b       	sub	r26, r26
 2d4:	bb 1b       	sub	r27, r27
 2d6:	51 e1       	ldi	r21, 0x11	; 17
 2d8:	07 c0       	rjmp	.+14     	; 0x2e8 <__udivmodhi4_ep>

000002da <__udivmodhi4_loop>:
 2da:	aa 1f       	adc	r26, r26
 2dc:	bb 1f       	adc	r27, r27
 2de:	a6 17       	cp	r26, r22
 2e0:	b7 07       	cpc	r27, r23
 2e2:	10 f0       	brcs	.+4      	; 0x2e8 <__udivmodhi4_ep>
 2e4:	a6 1b       	sub	r26, r22
 2e6:	b7 0b       	sbc	r27, r23

000002e8 <__udivmodhi4_ep>:
 2e8:	88 1f       	adc	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	5a 95       	dec	r21
 2ee:	a9 f7       	brne	.-22     	; 0x2da <__udivmodhi4_loop>
 2f0:	80 95       	com	r24
 2f2:	90 95       	com	r25
 2f4:	bc 01       	movw	r22, r24
 2f6:	cd 01       	movw	r24, r26
 2f8:	08 95       	ret

000002fa <_exit>:
 2fa:	f8 94       	cli

000002fc <__stop_program>:
 2fc:	ff cf       	rjmp	.-2      	; 0x2fc <__stop_program>
