
stepper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000071d  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d8  00000000  00000000  000008c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a3  00000000  00000000  00000e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001140  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031d  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d2  00000000  00000000  00001481  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001553  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	
	DDRB = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  70:	2f e9       	ldi	r18, 0x9F	; 159
  72:	86 e8       	ldi	r24, 0x86	; 134
  74:	91 e0       	ldi	r25, 0x01	; 1
  76:	21 50       	subi	r18, 0x01	; 1
  78:	80 40       	sbci	r24, 0x00	; 0
  7a:	90 40       	sbci	r25, 0x00	; 0
  7c:	e1 f7       	brne	.-8      	; 0x76 <main+0xa>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <main+0x14>
  80:	00 00       	nop
	_delay_ms(500);;	/* Make all pins of PORTB as output pins */
	
	while (1)		/* Blink PORTB infinitely */
	{
		
		PORTB = 0b00000001;// pin 0 of port c set HIGH
  82:	31 e0       	ldi	r19, 0x01	; 1
		_delay_ms(10);	/* Delay of 100 milli second */
		PORTB = 0b00000010;// pin 1 of port c set HIGH
  84:	22 e0       	ldi	r18, 0x02	; 2
		_delay_ms(10);	/* Delay of 100 milli second */
		PORTB = 0b00000100;// pin 2 of port c set HIGH
  86:	94 e0       	ldi	r25, 0x04	; 4
		_delay_ms(10);	/* Delay of 100 milli second */
		PORTB = 0b00001000;// pin 3 of port c set HIGH
  88:	88 e0       	ldi	r24, 0x08	; 8
	_delay_ms(500);;	/* Make all pins of PORTB as output pins */
	
	while (1)		/* Blink PORTB infinitely */
	{
		
		PORTB = 0b00000001;// pin 0 of port c set HIGH
  8a:	38 bb       	out	0x18, r19	; 24
  8c:	e3 ec       	ldi	r30, 0xC3	; 195
  8e:	f9 e0       	ldi	r31, 0x09	; 9
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <main+0x24>
  94:	00 c0       	rjmp	.+0      	; 0x96 <main+0x2a>
  96:	00 00       	nop
		_delay_ms(10);	/* Delay of 100 milli second */
		PORTB = 0b00000010;// pin 1 of port c set HIGH
  98:	28 bb       	out	0x18, r18	; 24
  9a:	e3 ec       	ldi	r30, 0xC3	; 195
  9c:	f9 e0       	ldi	r31, 0x09	; 9
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <main+0x32>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x38>
  a4:	00 00       	nop
		_delay_ms(10);	/* Delay of 100 milli second */
		PORTB = 0b00000100;// pin 2 of port c set HIGH
  a6:	98 bb       	out	0x18, r25	; 24
  a8:	e3 ec       	ldi	r30, 0xC3	; 195
  aa:	f9 e0       	ldi	r31, 0x09	; 9
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0x40>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x46>
  b2:	00 00       	nop
		_delay_ms(10);	/* Delay of 100 milli second */
		PORTB = 0b00001000;// pin 3 of port c set HIGH
  b4:	88 bb       	out	0x18, r24	; 24
  b6:	e3 ec       	ldi	r30, 0xC3	; 195
  b8:	f9 e0       	ldi	r31, 0x09	; 9
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x4e>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x54>
  c0:	00 00       	nop
  c2:	e3 cf       	rjmp	.-58     	; 0x8a <main+0x1e>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
