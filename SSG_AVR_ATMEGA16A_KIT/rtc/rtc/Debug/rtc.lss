
rtc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000700  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  00800060  00000700  00000774  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000824  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000150  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001c5c  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bcc  00000000  00000000  0000260c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f36  00000000  00000000  000031d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000304  00000000  00000000  00004110  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000050b  00000000  00000000  00004414  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000128f  00000000  00000000  0000491f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000148  00000000  00000000  00005bae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e0       	ldi	r30, 0x00	; 0
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3e       	cpi	r26, 0xE0	; 224
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 1b 03 	call	0x636	; 0x636 <main>
  7a:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ClockInit>:
	DS1307Read(0x02,&temp);
	hr=(((temp & 0b00010000)>>4)*10)+(temp & 0b00001111);

	return hr;

}
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	1f 92       	push	r1
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <DS1307Init>
  90:	be 01       	movw	r22, r28
  92:	6f 5f       	subi	r22, 0xFF	; 255
  94:	7f 4f       	sbci	r23, 0xFF	; 255
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 57 01 	call	0x2ae	; 0x2ae <DS1307Read>
  9c:	98 2f       	mov	r25, r24
  9e:	88 23       	and	r24, r24
  a0:	e1 f0       	breq	.+56     	; 0xda <ClockInit+0x58>
  a2:	69 81       	ldd	r22, Y+1	; 0x01
  a4:	6f 77       	andi	r22, 0x7F	; 127
  a6:	69 83       	std	Y+1, r22	; 0x01
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	0e 94 81 01 	call	0x302	; 0x302 <DS1307Write>
  ae:	98 2f       	mov	r25, r24
  b0:	88 23       	and	r24, r24
  b2:	99 f0       	breq	.+38     	; 0xda <ClockInit+0x58>
  b4:	be 01       	movw	r22, r28
  b6:	6f 5f       	subi	r22, 0xFF	; 255
  b8:	7f 4f       	sbci	r23, 0xFF	; 255
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	0e 94 57 01 	call	0x2ae	; 0x2ae <DS1307Read>
  c0:	98 2f       	mov	r25, r24
  c2:	88 23       	and	r24, r24
  c4:	51 f0       	breq	.+20     	; 0xda <ClockInit+0x58>
  c6:	69 81       	ldd	r22, Y+1	; 0x01
  c8:	60 64       	ori	r22, 0x40	; 64
  ca:	69 83       	std	Y+1, r22	; 0x01
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	0e 94 81 01 	call	0x302	; 0x302 <DS1307Write>
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	81 11       	cpse	r24, r1
  d6:	01 c0       	rjmp	.+2      	; 0xda <ClockInit+0x58>
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	89 2f       	mov	r24, r25
  dc:	0f 90       	pop	r0
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <GetAmPm>:
1=pm

****************************************/

uint8_t GetAmPm()
{
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	1f 92       	push	r1
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
	uint8_t am_pm,temp;

	//Read the Hour Register
	DS1307Read(0x02,&temp);
  ee:	be 01       	movw	r22, r28
  f0:	6f 5f       	subi	r22, 0xFF	; 255
  f2:	7f 4f       	sbci	r23, 0xFF	; 255
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	0e 94 57 01 	call	0x2ae	; 0x2ae <DS1307Read>

	am_pm=(temp & 0b00100000)>>4;
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	80 72       	andi	r24, 0x20	; 32
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	95 95       	asr	r25
 102:	87 95       	ror	r24
 104:	95 95       	asr	r25
 106:	87 95       	ror	r24
 108:	95 95       	asr	r25
 10a:	87 95       	ror	r24
 10c:	95 95       	asr	r25
 10e:	87 95       	ror	r24

	return am_pm;

}
 110:	0f 90       	pop	r0
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <SetSecond>:
BOOL SetSecond(uint8_t sec)
{
	uint8_t temp,result;

	temp=((sec/10)<<4)|(sec%10);
	result=DS1307Write(0x00,temp);
 118:	9d ec       	ldi	r25, 0xCD	; 205
 11a:	89 9f       	mul	r24, r25
 11c:	91 2d       	mov	r25, r1
 11e:	11 24       	eor	r1, r1
 120:	96 95       	lsr	r25
 122:	96 95       	lsr	r25
 124:	96 95       	lsr	r25
 126:	20 e1       	ldi	r18, 0x10	; 16
 128:	92 9f       	mul	r25, r18
 12a:	b0 01       	movw	r22, r0
 12c:	11 24       	eor	r1, r1
 12e:	99 0f       	add	r25, r25
 130:	29 2f       	mov	r18, r25
 132:	22 0f       	add	r18, r18
 134:	22 0f       	add	r18, r18
 136:	92 0f       	add	r25, r18
 138:	89 1b       	sub	r24, r25
 13a:	68 2b       	or	r22, r24
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	0e 94 81 01 	call	0x302	; 0x302 <DS1307Write>

	return result;
}
 142:	08 95       	ret

00000144 <SetMinute>:
BOOL SetMinute(uint8_t min)
{
	uint8_t temp,result;

	temp=((min/10)<<4)|(min%10);
	result=DS1307Write(0x01,temp);
 144:	9d ec       	ldi	r25, 0xCD	; 205
 146:	89 9f       	mul	r24, r25
 148:	91 2d       	mov	r25, r1
 14a:	11 24       	eor	r1, r1
 14c:	96 95       	lsr	r25
 14e:	96 95       	lsr	r25
 150:	96 95       	lsr	r25
 152:	20 e1       	ldi	r18, 0x10	; 16
 154:	92 9f       	mul	r25, r18
 156:	b0 01       	movw	r22, r0
 158:	11 24       	eor	r1, r1
 15a:	99 0f       	add	r25, r25
 15c:	29 2f       	mov	r18, r25
 15e:	22 0f       	add	r18, r18
 160:	22 0f       	add	r18, r18
 162:	92 0f       	add	r25, r18
 164:	89 1b       	sub	r24, r25
 166:	68 2b       	or	r22, r24
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 81 01 	call	0x302	; 0x302 <DS1307Write>

	return result;
	
}
 16e:	08 95       	ret

00000170 <SetHour>:
1=success

****************************************/

BOOL SetHour(uint8_t hr)
{
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
	uint8_t temp,result,am_pm;

	am_pm=GetAmPm();
 174:	0e 94 72 00 	call	0xe4	; 0xe4 <GetAmPm>

	temp=((hr/10)<<4)|(hr%10);
 178:	9d ec       	ldi	r25, 0xCD	; 205
 17a:	c9 9f       	mul	r28, r25
 17c:	91 2d       	mov	r25, r1
 17e:	11 24       	eor	r1, r1
 180:	96 95       	lsr	r25
 182:	96 95       	lsr	r25
 184:	96 95       	lsr	r25
 186:	40 e1       	ldi	r20, 0x10	; 16
 188:	94 9f       	mul	r25, r20
 18a:	90 01       	movw	r18, r0
 18c:	11 24       	eor	r1, r1
 18e:	99 0f       	add	r25, r25
 190:	39 2f       	mov	r19, r25
 192:	33 0f       	add	r19, r19
 194:	33 0f       	add	r19, r19
 196:	93 0f       	add	r25, r19
 198:	c9 1b       	sub	r28, r25
 19a:	2c 2b       	or	r18, r28
	temp|=0b01000000; //12 Hr Mode
	
	if(am_pm)
 19c:	81 11       	cpse	r24, r1
 19e:	03 c0       	rjmp	.+6      	; 0x1a6 <SetHour+0x36>
	uint8_t temp,result,am_pm;

	am_pm=GetAmPm();

	temp=((hr/10)<<4)|(hr%10);
	temp|=0b01000000; //12 Hr Mode
 1a0:	62 2f       	mov	r22, r18
 1a2:	60 64       	ori	r22, 0x40	; 64
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <SetHour+0x3a>
	
	if(am_pm)
	{
		temp|=0b00100000;
 1a6:	62 2f       	mov	r22, r18
 1a8:	60 66       	ori	r22, 0x60	; 96
	}
	result=DS1307Write(0x02,temp);
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	0e 94 81 01 	call	0x302	; 0x302 <DS1307Write>

	return result;
	
}
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <SetAmPm>:
1=success

****************************************/

BOOL SetAmPm(BOOL pm)
{
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	1f 92       	push	r1
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	18 2f       	mov	r17, r24
	uint8_t temp,result;

	DS1307Read(0x02,&temp);
 1c2:	be 01       	movw	r22, r28
 1c4:	6f 5f       	subi	r22, 0xFF	; 255
 1c6:	7f 4f       	sbci	r23, 0xFF	; 255
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	0e 94 57 01 	call	0x2ae	; 0x2ae <DS1307Read>

	if(pm)
 1ce:	11 23       	and	r17, r17
 1d0:	21 f0       	breq	.+8      	; 0x1da <SetAmPm+0x26>
		temp|=0b00100000;//SET
 1d2:	89 81       	ldd	r24, Y+1	; 0x01
 1d4:	80 62       	ori	r24, 0x20	; 32
 1d6:	89 83       	std	Y+1, r24	; 0x01
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <SetAmPm+0x2c>
	else
		temp&=0b11011111;//CLEAR
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	8f 7d       	andi	r24, 0xDF	; 223
 1de:	89 83       	std	Y+1, r24	; 0x01

	result=DS1307Write(0x02,temp);
 1e0:	69 81       	ldd	r22, Y+1	; 0x01
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	0e 94 81 01 	call	0x302	; 0x302 <DS1307Write>

	return result;
			
}
 1e8:	0f 90       	pop	r0
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	08 95       	ret

000001f2 <GetTimeString>:


****************************************/

BOOL GetTimeString(char *Time)
{
 1f2:	0f 93       	push	r16
 1f4:	1f 93       	push	r17
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	1f 92       	push	r1
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
 200:	8c 01       	movw	r16, r24
	uint8_t data;

	if(!DS1307Read(0x00,&data))
 202:	be 01       	movw	r22, r28
 204:	6f 5f       	subi	r22, 0xFF	; 255
 206:	7f 4f       	sbci	r23, 0xFF	; 255
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	0e 94 57 01 	call	0x2ae	; 0x2ae <DS1307Read>
 20e:	88 23       	and	r24, r24
 210:	09 f4       	brne	.+2      	; 0x214 <GetTimeString+0x22>
 212:	44 c0       	rjmp	.+136    	; 0x29c <GetTimeString+0xaa>
	{
		//I/O Error
		return 0;
	}

	Time[11]='\0';
 214:	f8 01       	movw	r30, r16
 216:	13 86       	std	Z+11, r1	; 0x0b
	Time[10]='M';
 218:	8d e4       	ldi	r24, 0x4D	; 77
 21a:	82 87       	std	Z+10, r24	; 0x0a
	Time[8]=' ';
 21c:	80 e2       	ldi	r24, 0x20	; 32
 21e:	80 87       	std	Z+8, r24	; 0x08

	Time[7]=48+(data & 0b00001111);
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	98 2f       	mov	r25, r24
 224:	9f 70       	andi	r25, 0x0F	; 15
 226:	90 5d       	subi	r25, 0xD0	; 208
 228:	97 83       	std	Z+7, r25	; 0x07
	Time[6]=48+((data & 0b01110000)>>4);
 22a:	80 77       	andi	r24, 0x70	; 112
 22c:	82 95       	swap	r24
 22e:	8f 70       	andi	r24, 0x0F	; 15
 230:	80 5d       	subi	r24, 0xD0	; 208
 232:	86 83       	std	Z+6, r24	; 0x06
	Time[5]=':';
 234:	8a e3       	ldi	r24, 0x3A	; 58
 236:	85 83       	std	Z+5, r24	; 0x05

	if(!DS1307Read(0x01,&data))
 238:	be 01       	movw	r22, r28
 23a:	6f 5f       	subi	r22, 0xFF	; 255
 23c:	7f 4f       	sbci	r23, 0xFF	; 255
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	0e 94 57 01 	call	0x2ae	; 0x2ae <DS1307Read>
 244:	88 23       	and	r24, r24
 246:	51 f1       	breq	.+84     	; 0x29c <GetTimeString+0xaa>
	{
		//I/O Error
		return 0;
	}
	
	Time[4]=48+(data & 0b00001111);
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	98 2f       	mov	r25, r24
 24c:	9f 70       	andi	r25, 0x0F	; 15
 24e:	90 5d       	subi	r25, 0xD0	; 208
 250:	f8 01       	movw	r30, r16
 252:	94 83       	std	Z+4, r25	; 0x04
	Time[3]=48+((data & 0b01110000)>>4);
 254:	80 77       	andi	r24, 0x70	; 112
 256:	82 95       	swap	r24
 258:	8f 70       	andi	r24, 0x0F	; 15
 25a:	80 5d       	subi	r24, 0xD0	; 208
 25c:	83 83       	std	Z+3, r24	; 0x03
	Time[2]=':';
 25e:	8a e3       	ldi	r24, 0x3A	; 58
 260:	82 83       	std	Z+2, r24	; 0x02
	
	if(!DS1307Read(0x02,&data))
 262:	be 01       	movw	r22, r28
 264:	6f 5f       	subi	r22, 0xFF	; 255
 266:	7f 4f       	sbci	r23, 0xFF	; 255
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	0e 94 57 01 	call	0x2ae	; 0x2ae <DS1307Read>
 26e:	88 23       	and	r24, r24
 270:	a9 f0       	breq	.+42     	; 0x29c <GetTimeString+0xaa>
	{
		//I/O Error
		return 0;
	}
	
	Time[1]=48+(data & 0b00001111);
 272:	89 81       	ldd	r24, Y+1	; 0x01
 274:	98 2f       	mov	r25, r24
 276:	9f 70       	andi	r25, 0x0F	; 15
 278:	90 5d       	subi	r25, 0xD0	; 208
 27a:	f8 01       	movw	r30, r16
 27c:	91 83       	std	Z+1, r25	; 0x01
	Time[0]=48+((data & 0b00010000)>>4);
 27e:	84 fb       	bst	r24, 4
 280:	99 27       	eor	r25, r25
 282:	90 f9       	bld	r25, 0
 284:	90 5d       	subi	r25, 0xD0	; 208
 286:	90 83       	st	Z, r25

	//AM/PM
	if(data & 0b00100000)
 288:	85 ff       	sbrs	r24, 5
 28a:	04 c0       	rjmp	.+8      	; 0x294 <GetTimeString+0xa2>
	{
		Time[9]='P';
 28c:	80 e5       	ldi	r24, 0x50	; 80
 28e:	81 87       	std	Z+9, r24	; 0x09
	else
	{
		Time[9]='A';
	}

	return 1;//Success
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	04 c0       	rjmp	.+8      	; 0x29c <GetTimeString+0xaa>
	{
		Time[9]='P';
	}
	else
	{
		Time[9]='A';
 294:	81 e4       	ldi	r24, 0x41	; 65
 296:	f8 01       	movw	r30, r16
 298:	81 87       	std	Z+9, r24	; 0x09
	}

	return 1;//Success
 29a:	81 e0       	ldi	r24, 0x01	; 1

}
 29c:	0f 90       	pop	r0
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	1f 91       	pop	r17
 2a4:	0f 91       	pop	r16
 2a6:	08 95       	ret

000002a8 <DS1307Init>:
#include "i2csoft.h"
#include "ds1307_soft_i2c.h"

void DS1307Init(void)
{
	SoftI2CInit();
 2a8:	0e 94 a2 01 	call	0x344	; 0x344 <SoftI2CInit>
 2ac:	08 95       	ret

000002ae <DS1307Read>:
0= Failure
1= Success
***************************************************/

BOOL DS1307Read(uint8_t address,uint8_t *data)
{
 2ae:	0f 93       	push	r16
 2b0:	1f 93       	push	r17
 2b2:	cf 93       	push	r28
 2b4:	c8 2f       	mov	r28, r24
 2b6:	8b 01       	movw	r16, r22
	uint8_t res;	//result
	
	//Start
	SoftI2CStart();
 2b8:	0e 94 ab 01 	call	0x356	; 0x356 <SoftI2CStart>
	
	//SLA+W (for dummy write to set register pointer)
	res=SoftI2CWriteByte(DS1307_SLA_W);	//DS1307 address + W
 2bc:	80 ed       	ldi	r24, 0xD0	; 208
 2be:	0e 94 c4 01 	call	0x388	; 0x388 <SoftI2CWriteByte>
	
	//Error
	if(!res)	return FALSE;
 2c2:	88 23       	and	r24, r24
 2c4:	a9 f0       	breq	.+42     	; 0x2f0 <DS1307Read+0x42>
	
	//Now send the address of required register
	res=SoftI2CWriteByte(address);
 2c6:	8c 2f       	mov	r24, r28
 2c8:	0e 94 c4 01 	call	0x388	; 0x388 <SoftI2CWriteByte>
	
	//Error
	if(!res)	return FALSE;
 2cc:	88 23       	and	r24, r24
 2ce:	91 f0       	breq	.+36     	; 0x2f4 <DS1307Read+0x46>
	
	//Repeat Start
	SoftI2CStart();
 2d0:	0e 94 ab 01 	call	0x356	; 0x356 <SoftI2CStart>
	
	//SLA + R
	res=SoftI2CWriteByte(DS1307_SLA_R);	//DS1307 Address + R
 2d4:	81 ed       	ldi	r24, 0xD1	; 209
 2d6:	0e 94 c4 01 	call	0x388	; 0x388 <SoftI2CWriteByte>
	
	//Error
	if(!res)	return FALSE;
 2da:	88 23       	and	r24, r24
 2dc:	69 f0       	breq	.+26     	; 0x2f8 <DS1307Read+0x4a>
	
	//Now read the value with NACK
	*data=SoftI2CReadByte(0);
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	0e 94 f7 01 	call	0x3ee	; 0x3ee <SoftI2CReadByte>
 2e4:	f8 01       	movw	r30, r16
 2e6:	80 83       	st	Z, r24
	
	//Error
	if(!res)	return FALSE;
	
	//STOP
	SoftI2CStop();
 2e8:	0e 94 b5 01 	call	0x36a	; 0x36a <SoftI2CStop>
	
	return TRUE;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	05 c0       	rjmp	.+10     	; 0x2fa <DS1307Read+0x4c>
	
	//SLA+W (for dummy write to set register pointer)
	res=SoftI2CWriteByte(DS1307_SLA_W);	//DS1307 address + W
	
	//Error
	if(!res)	return FALSE;
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	03 c0       	rjmp	.+6      	; 0x2fa <DS1307Read+0x4c>
	
	//Now send the address of required register
	res=SoftI2CWriteByte(address);
	
	//Error
	if(!res)	return FALSE;
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	01 c0       	rjmp	.+2      	; 0x2fa <DS1307Read+0x4c>
	
	//SLA + R
	res=SoftI2CWriteByte(DS1307_SLA_R);	//DS1307 Address + R
	
	//Error
	if(!res)	return FALSE;
 2f8:	80 e0       	ldi	r24, 0x00	; 0
	
	//STOP
	SoftI2CStop();
	
	return TRUE;
}
 2fa:	cf 91       	pop	r28
 2fc:	1f 91       	pop	r17
 2fe:	0f 91       	pop	r16
 300:	08 95       	ret

00000302 <DS1307Write>:
0= Failure
1= Success
***************************************************/

BOOL DS1307Write(uint8_t address,uint8_t data)
{
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	c8 2f       	mov	r28, r24
 308:	d6 2f       	mov	r29, r22
	uint8_t res;	//result
	
	//Start
	SoftI2CStart();
 30a:	0e 94 ab 01 	call	0x356	; 0x356 <SoftI2CStart>
	
	//SLA+W
	res=SoftI2CWriteByte(DS1307_SLA_W);	//DS1307 address + W
 30e:	80 ed       	ldi	r24, 0xD0	; 208
 310:	0e 94 c4 01 	call	0x388	; 0x388 <SoftI2CWriteByte>
	
	//Error
	if(!res)	return FALSE;
 314:	88 23       	and	r24, r24
 316:	71 f0       	breq	.+28     	; 0x334 <DS1307Write+0x32>
	
	//Now send the address of required register
	res=SoftI2CWriteByte(address);
 318:	8c 2f       	mov	r24, r28
 31a:	0e 94 c4 01 	call	0x388	; 0x388 <SoftI2CWriteByte>
	
	//Error
	if(!res)	return FALSE;
 31e:	88 23       	and	r24, r24
 320:	59 f0       	breq	.+22     	; 0x338 <DS1307Write+0x36>
	
	//Now write the value
	res=SoftI2CWriteByte(data);
 322:	8d 2f       	mov	r24, r29
 324:	0e 94 c4 01 	call	0x388	; 0x388 <SoftI2CWriteByte>
	
	//Error
	if(!res)	return FALSE;
 328:	88 23       	and	r24, r24
 32a:	41 f0       	breq	.+16     	; 0x33c <DS1307Write+0x3a>
	
	//STOP
	SoftI2CStop();
 32c:	0e 94 b5 01 	call	0x36a	; 0x36a <SoftI2CStop>
	
	return TRUE;
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	05 c0       	rjmp	.+10     	; 0x33e <DS1307Write+0x3c>
	
	//SLA+W
	res=SoftI2CWriteByte(DS1307_SLA_W);	//DS1307 address + W
	
	//Error
	if(!res)	return FALSE;
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	03 c0       	rjmp	.+6      	; 0x33e <DS1307Write+0x3c>
	
	//Now send the address of required register
	res=SoftI2CWriteByte(address);
	
	//Error
	if(!res)	return FALSE;
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	01 c0       	rjmp	.+2      	; 0x33e <DS1307Write+0x3c>
	
	//Now write the value
	res=SoftI2CWriteByte(data);
	
	//Error
	if(!res)	return FALSE;
 33c:	80 e0       	ldi	r24, 0x00	; 0
	
	//STOP
	SoftI2CStop();
	
	return TRUE;
}
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	08 95       	ret

00000344 <SoftI2CInit>:
#define Q_DEL _delay_loop_2(3)
#define H_DEL _delay_loop_2(5)

void SoftI2CInit()
{
	SDAPORT&=(1<<SDA);
 344:	82 b3       	in	r24, 0x12	; 18
 346:	80 78       	andi	r24, 0x80	; 128
 348:	82 bb       	out	0x12, r24	; 18
	SCLPORT&=(1<<SCL);
 34a:	82 b3       	in	r24, 0x12	; 18
 34c:	80 74       	andi	r24, 0x40	; 64
 34e:	82 bb       	out	0x12, r24	; 18
	
	SOFT_I2C_SDA_HIGH;	
 350:	8f 98       	cbi	0x11, 7	; 17
	SOFT_I2C_SCL_HIGH;	
 352:	8e 98       	cbi	0x11, 6	; 17
 354:	08 95       	ret

00000356 <SoftI2CStart>:
		
}
void SoftI2CStart()
{
	SOFT_I2C_SCL_HIGH;
 356:	8e 98       	cbi	0x11, 6	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 358:	85 e0       	ldi	r24, 0x05	; 5
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	fc 01       	movw	r30, r24
 35e:	31 97       	sbiw	r30, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <SoftI2CStart+0x8>
	H_DEL;
	
	SOFT_I2C_SDA_LOW;	
 362:	8f 9a       	sbi	0x11, 7	; 17
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <SoftI2CStart+0xe>
 368:	08 95       	ret

0000036a <SoftI2CStop>:
	H_DEL;  	
}

void SoftI2CStop()
{
	 SOFT_I2C_SDA_LOW;
 36a:	8f 9a       	sbi	0x11, 7	; 17
 36c:	85 e0       	ldi	r24, 0x05	; 5
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	fc 01       	movw	r30, r24
 372:	31 97       	sbiw	r30, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <SoftI2CStop+0x8>
	 H_DEL;
	 SOFT_I2C_SCL_HIGH;
 376:	8e 98       	cbi	0x11, 6	; 17
 378:	e3 e0       	ldi	r30, 0x03	; 3
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	31 97       	sbiw	r30, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <SoftI2CStop+0x12>
	 Q_DEL;
	 SOFT_I2C_SDA_HIGH;
 380:	8f 98       	cbi	0x11, 7	; 17
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <SoftI2CStop+0x18>
 386:	08 95       	ret

00000388 <SoftI2CWriteByte>:
	 H_DEL;
}

uint8_t SoftI2CWriteByte(uint8_t data)
{
 388:	98 e0       	ldi	r25, 0x08	; 8
 38a:	43 e0       	ldi	r20, 0x03	; 3
 38c:	50 e0       	ldi	r21, 0x00	; 0
 38e:	25 e0       	ldi	r18, 0x05	; 5
 390:	30 e0       	ldi	r19, 0x00	; 0
	 
	 uint8_t i;
	 	
	 for(i=0;i<8;i++)
	 {
		SOFT_I2C_SCL_LOW;
 392:	8e 9a       	sbi	0x11, 6	; 17
 394:	fa 01       	movw	r30, r20
 396:	31 97       	sbiw	r30, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <SoftI2CWriteByte+0xe>
		Q_DEL;
		
		if(data & 0x80)
 39a:	88 23       	and	r24, r24
 39c:	14 f4       	brge	.+4      	; 0x3a2 <SoftI2CWriteByte+0x1a>
			SOFT_I2C_SDA_HIGH;
 39e:	8f 98       	cbi	0x11, 7	; 17
 3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <SoftI2CWriteByte+0x1c>
		else
			SOFT_I2C_SDA_LOW;	
 3a2:	8f 9a       	sbi	0x11, 7	; 17
 3a4:	f9 01       	movw	r30, r18
 3a6:	31 97       	sbiw	r30, 0x01	; 1
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <SoftI2CWriteByte+0x1e>
		
		H_DEL;
		
		SOFT_I2C_SCL_HIGH;
 3aa:	8e 98       	cbi	0x11, 6	; 17
 3ac:	f9 01       	movw	r30, r18
 3ae:	31 97       	sbiw	r30, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <SoftI2CWriteByte+0x26>
		H_DEL;
		
		while((SCLPIN & (1<<SCL))==0);
 3b2:	86 9b       	sbis	0x10, 6	; 16
 3b4:	fe cf       	rjmp	.-4      	; 0x3b2 <SoftI2CWriteByte+0x2a>
			
		data=data<<1;
 3b6:	88 0f       	add	r24, r24
 3b8:	91 50       	subi	r25, 0x01	; 1
uint8_t SoftI2CWriteByte(uint8_t data)
{
	 
	 uint8_t i;
	 	
	 for(i=0;i<8;i++)
 3ba:	59 f7       	brne	.-42     	; 0x392 <SoftI2CWriteByte+0xa>
			
		data=data<<1;
	}
	 
	//The 9th clock (ACK Phase)
	SOFT_I2C_SCL_LOW;
 3bc:	8e 9a       	sbi	0x11, 6	; 17
 3be:	83 e0       	ldi	r24, 0x03	; 3
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <SoftI2CWriteByte+0x3a>
	Q_DEL;
		
	SOFT_I2C_SDA_HIGH;		
 3c6:	8f 98       	cbi	0x11, 7	; 17
 3c8:	25 e0       	ldi	r18, 0x05	; 5
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	c9 01       	movw	r24, r18
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <SoftI2CWriteByte+0x46>
	H_DEL;
		
	SOFT_I2C_SCL_HIGH;
 3d2:	8e 98       	cbi	0x11, 6	; 17
 3d4:	c9 01       	movw	r24, r18
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <SoftI2CWriteByte+0x4e>
	H_DEL;	
	
	uint8_t ack=!(SDAPIN & (1<<SDA));
 3da:	80 b3       	in	r24, 0x10	; 16
	
	SOFT_I2C_SCL_LOW;
 3dc:	8e 9a       	sbi	0x11, 6	; 17
 3de:	f9 01       	movw	r30, r18
 3e0:	31 97       	sbiw	r30, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <SoftI2CWriteByte+0x58>
	H_DEL;
	
	return ack;
 3e4:	80 95       	com	r24
	 
}
 3e6:	88 1f       	adc	r24, r24
 3e8:	88 27       	eor	r24, r24
 3ea:	88 1f       	adc	r24, r24
 3ec:	08 95       	ret

000003ee <SoftI2CReadByte>:
 
 
uint8_t SoftI2CReadByte(uint8_t ack)
{
 3ee:	98 2f       	mov	r25, r24
 3f0:	20 e0       	ldi	r18, 0x00	; 0
 3f2:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t data=0x00;
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	45 e0       	ldi	r20, 0x05	; 5
 3f8:	50 e0       	ldi	r21, 0x00	; 0
		H_DEL;
			
		while((SCLPIN & (1<<SCL))==0);
		
		if(SDAPIN &(1<<SDA))
			data|=(0x80>>i);
 3fa:	a0 e8       	ldi	r26, 0x80	; 128
 3fc:	b0 e0       	ldi	r27, 0x00	; 0
	uint8_t i;
			
	for(i=0;i<8;i++)
	{
			
		SOFT_I2C_SCL_LOW;
 3fe:	8e 9a       	sbi	0x11, 6	; 17
 400:	fa 01       	movw	r30, r20
 402:	31 97       	sbiw	r30, 0x01	; 1
 404:	f1 f7       	brne	.-4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		H_DEL;
		SOFT_I2C_SCL_HIGH;
 406:	8e 98       	cbi	0x11, 6	; 17
 408:	fa 01       	movw	r30, r20
 40a:	31 97       	sbiw	r30, 0x01	; 1
 40c:	f1 f7       	brne	.-4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		H_DEL;
			
		while((SCLPIN & (1<<SCL))==0);
 40e:	86 9b       	sbis	0x10, 6	; 16
 410:	fe cf       	rjmp	.-4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		
		if(SDAPIN &(1<<SDA))
 412:	87 9b       	sbis	0x10, 7	; 16
 414:	08 c0       	rjmp	.+16     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
			data|=(0x80>>i);
 416:	bd 01       	movw	r22, r26
 418:	02 2e       	mov	r0, r18
 41a:	02 c0       	rjmp	.+4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41c:	75 95       	asr	r23
 41e:	67 95       	ror	r22
 420:	0a 94       	dec	r0
 422:	e2 f7       	brpl	.-8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 424:	86 2b       	or	r24, r22
 426:	2f 5f       	subi	r18, 0xFF	; 255
 428:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t SoftI2CReadByte(uint8_t ack)
{
	uint8_t data=0x00;
	uint8_t i;
			
	for(i=0;i<8;i++)
 42a:	28 30       	cpi	r18, 0x08	; 8
 42c:	31 05       	cpc	r19, r1
 42e:	39 f7       	brne	.-50     	; 0x3fe <SoftI2CReadByte+0x10>
		if(SDAPIN &(1<<SDA))
			data|=(0x80>>i);
			
	}
		
	SOFT_I2C_SCL_LOW;
 430:	8e 9a       	sbi	0x11, 6	; 17
 432:	e3 e0       	ldi	r30, 0x03	; 3
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	31 97       	sbiw	r30, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
	Q_DEL;						//Soft_I2C_Put_Ack
	
	if(ack)
 43a:	99 23       	and	r25, r25
 43c:	11 f0       	breq	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
	{
		SOFT_I2C_SDA_LOW;	
 43e:	8f 9a       	sbi	0x11, 7	; 17
 440:	01 c0       	rjmp	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
	}
	else
	{
		SOFT_I2C_SDA_HIGH;
 442:	8f 98       	cbi	0x11, 7	; 17
 444:	25 e0       	ldi	r18, 0x05	; 5
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	f9 01       	movw	r30, r18
 44a:	31 97       	sbiw	r30, 0x01	; 1
 44c:	f1 f7       	brne	.-4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
	}	
	H_DEL;
	
	SOFT_I2C_SCL_HIGH;
 44e:	8e 98       	cbi	0x11, 6	; 17
 450:	f9 01       	movw	r30, r18
 452:	31 97       	sbiw	r30, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
	H_DEL;
	
	SOFT_I2C_SCL_LOW;
 456:	8e 9a       	sbi	0x11, 6	; 17
 458:	f9 01       	movw	r30, r18
 45a:	31 97       	sbiw	r30, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
	H_DEL;
			
	return data;
	
}
 45e:	08 95       	ret

00000460 <LCDBusyLoop>:
	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
	}
}
 460:	87 b3       	in	r24, 0x17	; 23
 462:	8f 70       	andi	r24, 0x0F	; 15
 464:	87 bb       	out	0x17, r24	; 23
 466:	c1 9a       	sbi	0x18, 1	; 24
 468:	c0 98       	cbi	0x18, 0	; 24
 46a:	00 00       	nop
 46c:	c2 9a       	sbi	0x18, 2	; 24
 46e:	00 00       	nop
 470:	86 b3       	in	r24, 0x16	; 22
 472:	80 7f       	andi	r24, 0xF0	; 240
 474:	00 00       	nop
 476:	c2 98       	cbi	0x18, 2	; 24
 478:	00 00       	nop
 47a:	c2 9a       	sbi	0x18, 2	; 24
 47c:	00 00       	nop
 47e:	96 b3       	in	r25, 0x16	; 22
 480:	00 00       	nop
 482:	c2 98       	cbi	0x18, 2	; 24
 484:	00 00       	nop
 486:	88 23       	and	r24, r24
 488:	8c f3       	brlt	.-30     	; 0x46c <LCDBusyLoop+0xc>
 48a:	c1 98       	cbi	0x18, 1	; 24
 48c:	87 b3       	in	r24, 0x17	; 23
 48e:	80 6f       	ori	r24, 0xF0	; 240
 490:	87 bb       	out	0x17, r24	; 23
 492:	08 95       	ret

00000494 <LCDByte>:
 494:	38 2f       	mov	r19, r24
 496:	32 95       	swap	r19
 498:	3f 70       	andi	r19, 0x0F	; 15
 49a:	98 2f       	mov	r25, r24
 49c:	9f 70       	andi	r25, 0x0F	; 15
 49e:	61 11       	cpse	r22, r1
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <LCDByte+0x12>
 4a2:	c0 98       	cbi	0x18, 0	; 24
 4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <LCDByte+0x14>
 4a6:	c0 9a       	sbi	0x18, 0	; 24
 4a8:	00 00       	nop
 4aa:	c2 9a       	sbi	0x18, 2	; 24
 4ac:	28 b3       	in	r18, 0x18	; 24
 4ae:	82 2f       	mov	r24, r18
 4b0:	8f 70       	andi	r24, 0x0F	; 15
 4b2:	40 e1       	ldi	r20, 0x10	; 16
 4b4:	34 9f       	mul	r19, r20
 4b6:	90 01       	movw	r18, r0
 4b8:	11 24       	eor	r1, r1
 4ba:	28 2b       	or	r18, r24
 4bc:	28 bb       	out	0x18, r18	; 24
 4be:	00 00       	nop
 4c0:	c2 98       	cbi	0x18, 2	; 24
 4c2:	00 00       	nop
 4c4:	c2 9a       	sbi	0x18, 2	; 24
 4c6:	88 b3       	in	r24, 0x18	; 24
 4c8:	28 2f       	mov	r18, r24
 4ca:	2f 70       	andi	r18, 0x0F	; 15
 4cc:	30 e1       	ldi	r19, 0x10	; 16
 4ce:	93 9f       	mul	r25, r19
 4d0:	c0 01       	movw	r24, r0
 4d2:	11 24       	eor	r1, r1
 4d4:	82 2b       	or	r24, r18
 4d6:	88 bb       	out	0x18, r24	; 24
 4d8:	00 00       	nop
 4da:	c2 98       	cbi	0x18, 2	; 24
 4dc:	00 00       	nop
 4de:	0e 94 30 02 	call	0x460	; 0x460 <LCDBusyLoop>
 4e2:	08 95       	ret

000004e4 <LCDInit>:
 4e4:	cf 93       	push	r28
 4e6:	c8 2f       	mov	r28, r24
 4e8:	8b e4       	ldi	r24, 0x4B	; 75
 4ea:	9d e1       	ldi	r25, 0x1D	; 29
 4ec:	01 97       	sbiw	r24, 0x01	; 1
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <LCDInit+0x8>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <LCDInit+0xe>
 4f2:	00 00       	nop
 4f4:	87 b3       	in	r24, 0x17	; 23
 4f6:	80 6f       	ori	r24, 0xF0	; 240
 4f8:	87 bb       	out	0x17, r24	; 23
 4fa:	ba 9a       	sbi	0x17, 2	; 23
 4fc:	b8 9a       	sbi	0x17, 0	; 23
 4fe:	b9 9a       	sbi	0x17, 1	; 23
 500:	88 b3       	in	r24, 0x18	; 24
 502:	8f 70       	andi	r24, 0x0F	; 15
 504:	88 bb       	out	0x18, r24	; 24
 506:	c2 98       	cbi	0x18, 2	; 24
 508:	c1 98       	cbi	0x18, 1	; 24
 50a:	c0 98       	cbi	0x18, 0	; 24
 50c:	00 00       	nop
 50e:	c2 9a       	sbi	0x18, 2	; 24
 510:	c5 9a       	sbi	0x18, 5	; 24
 512:	00 00       	nop
 514:	c2 98       	cbi	0x18, 2	; 24
 516:	00 00       	nop
 518:	0e 94 30 02 	call	0x460	; 0x460 <LCDBusyLoop>
 51c:	60 e0       	ldi	r22, 0x00	; 0
 51e:	8c 2f       	mov	r24, r28
 520:	8c 60       	ori	r24, 0x0C	; 12
 522:	0e 94 4a 02 	call	0x494	; 0x494 <LCDByte>
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	88 e2       	ldi	r24, 0x28	; 40
 52a:	0e 94 4a 02 	call	0x494	; 0x494 <LCDByte>
 52e:	cf 91       	pop	r28
 530:	08 95       	ret

00000532 <LCDWriteString>:
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	ec 01       	movw	r28, r24
 538:	88 81       	ld	r24, Y
 53a:	88 23       	and	r24, r24
 53c:	39 f0       	breq	.+14     	; 0x54c <LCDWriteString+0x1a>
 53e:	21 96       	adiw	r28, 0x01	; 1
 540:	61 e0       	ldi	r22, 0x01	; 1
 542:	0e 94 4a 02 	call	0x494	; 0x494 <LCDByte>
 546:	89 91       	ld	r24, Y+
 548:	81 11       	cpse	r24, r1
 54a:	fa cf       	rjmp	.-12     	; 0x540 <LCDWriteString+0xe>
 54c:	df 91       	pop	r29
 54e:	cf 91       	pop	r28
 550:	08 95       	ret

00000552 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 552:	88 32       	cpi	r24, 0x28	; 40
 554:	30 f4       	brcc	.+12     	; 0x562 <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
 556:	61 11       	cpse	r22, r1
 558:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 55a:	60 e0       	ldi	r22, 0x00	; 0
 55c:	80 68       	ori	r24, 0x80	; 128
 55e:	0e 94 4a 02 	call	0x494	; 0x494 <LCDByte>
 562:	08 95       	ret

00000564 <write_new_time>:
}


void write_new_time(void)
{
	LCDClear();
 564:	60 e0       	ldi	r22, 0x00	; 0
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	0e 94 4a 02 	call	0x494	; 0x494 <LCDByte>
	LCDWriteString("press1toWrtNew");
 56c:	80 e6       	ldi	r24, 0x60	; 96
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 99 02 	call	0x532	; 0x532 <LCDWriteString>
	LCDWriteStringXY(0,1,"newtime, 2toExit");
 574:	61 e0       	ldi	r22, 0x01	; 1
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	0e 94 a9 02 	call	0x552	; 0x552 <LCDGotoXY>
 57c:	8f e6       	ldi	r24, 0x6F	; 111
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 99 02 	call	0x532	; 0x532 <LCDWriteString>
	
	while(1)
	{
		int i;
		i = PINA;
 584:	89 b3       	in	r24, 0x19	; 25
		i = i & 0x0f;
 586:	8f 70       	andi	r24, 0x0F	; 15
 588:	90 e0       	ldi	r25, 0x00	; 0
		if (i == 0x07)
 58a:	87 30       	cpi	r24, 0x07	; 7
 58c:	91 05       	cpc	r25, r1
 58e:	21 f0       	breq	.+8      	; 0x598 <write_new_time+0x34>
			SetAmPm(meridian);
			_delay_ms(3000);
			PORTC=0xff;
			return;
		}
		if (i == 0x0b)
 590:	0b 97       	sbiw	r24, 0x0b	; 11
 592:	09 f0       	breq	.+2      	; 0x596 <write_new_time+0x32>
 594:	43 c0       	rjmp	.+134    	; 0x61c <write_new_time+0xb8>
 596:	24 c0       	rjmp	.+72     	; 0x5e0 <write_new_time+0x7c>
		int i;
		i = PINA;
		i = i & 0x0f;
		if (i == 0x07)
		{
			LCDClear();
 598:	60 e0       	ldi	r22, 0x00	; 0
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	0e 94 4a 02 	call	0x494	; 0x494 <LCDByte>
			LCDWriteString("writing_newTime");
 5a0:	80 e8       	ldi	r24, 0x80	; 128
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	0e 94 99 02 	call	0x532	; 0x532 <LCDWriteString>
			PORTC=0xef;
 5a8:	8f ee       	ldi	r24, 0xEF	; 239
 5aa:	85 bb       	out	0x15, r24	; 21
			uint8_t hours = 4, minutes = 52, seconds = 0, meridian = 1;// change these values if you want to reset the time
			
			SetHour(hours);
 5ac:	84 e0       	ldi	r24, 0x04	; 4
 5ae:	0e 94 b8 00 	call	0x170	; 0x170 <SetHour>
			SetMinute(minutes);
 5b2:	84 e3       	ldi	r24, 0x34	; 52
 5b4:	0e 94 a2 00 	call	0x144	; 0x144 <SetMinute>
			SetSecond(seconds);
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	0e 94 8c 00 	call	0x118	; 0x118 <SetSecond>
			SetAmPm(meridian);
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <SetAmPm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5c4:	2f eb       	ldi	r18, 0xBF	; 191
 5c6:	87 e2       	ldi	r24, 0x27	; 39
 5c8:	99 e0       	ldi	r25, 0x09	; 9
 5ca:	21 50       	subi	r18, 0x01	; 1
 5cc:	80 40       	sbci	r24, 0x00	; 0
 5ce:	90 40       	sbci	r25, 0x00	; 0
 5d0:	e1 f7       	brne	.-8      	; 0x5ca <write_new_time+0x66>
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <write_new_time+0x70>
 5d4:	00 00       	nop
			_delay_ms(3000);
			PORTC=0xff;
 5d6:	8f ef       	ldi	r24, 0xFF	; 255
 5d8:	85 bb       	out	0x15, r24	; 21
			return;
 5da:	08 95       	ret
		}
		if (i == 0x0b)
 5dc:	0b 97       	sbiw	r24, 0x0b	; 11
 5de:	f1 f4       	brne	.+60     	; 0x61c <write_new_time+0xb8>
		{
			PORTC=0xdf;
 5e0:	8f ed       	ldi	r24, 0xDF	; 223
 5e2:	85 bb       	out	0x15, r24	; 21
			LCDClear();
 5e4:	60 e0       	ldi	r22, 0x00	; 0
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	0e 94 4a 02 	call	0x494	; 0x494 <LCDByte>
			LCDWriteString("SwitchingToRead");
 5ec:	80 e9       	ldi	r24, 0x90	; 144
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	0e 94 99 02 	call	0x532	; 0x532 <LCDWriteString>
			LCDWriteStringXY(0,1,"mode....");
 5f4:	61 e0       	ldi	r22, 0x01	; 1
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	0e 94 a9 02 	call	0x552	; 0x552 <LCDGotoXY>
 5fc:	80 ea       	ldi	r24, 0xA0	; 160
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	0e 94 99 02 	call	0x532	; 0x532 <LCDWriteString>
 604:	2f eb       	ldi	r18, 0xBF	; 191
 606:	87 e2       	ldi	r24, 0x27	; 39
 608:	99 e0       	ldi	r25, 0x09	; 9
 60a:	21 50       	subi	r18, 0x01	; 1
 60c:	80 40       	sbci	r24, 0x00	; 0
 60e:	90 40       	sbci	r25, 0x00	; 0
 610:	e1 f7       	brne	.-8      	; 0x60a <write_new_time+0xa6>
 612:	00 c0       	rjmp	.+0      	; 0x614 <write_new_time+0xb0>
 614:	00 00       	nop
			_delay_ms(3000);
			PORTC=0xff;
 616:	8f ef       	ldi	r24, 0xFF	; 255
 618:	85 bb       	out	0x15, r24	; 21
			return ; 
 61a:	08 95       	ret
 61c:	87 ea       	ldi	r24, 0xA7	; 167
 61e:	91 e6       	ldi	r25, 0x61	; 97
 620:	01 97       	sbiw	r24, 0x01	; 1
 622:	f1 f7       	brne	.-4      	; 0x620 <write_new_time+0xbc>
 624:	00 c0       	rjmp	.+0      	; 0x626 <write_new_time+0xc2>
 626:	00 00       	nop
	LCDWriteStringXY(0,1,"newtime, 2toExit");
	
	while(1)
	{
		int i;
		i = PINA;
 628:	89 b3       	in	r24, 0x19	; 25
		i = i & 0x0f;
 62a:	8f 70       	andi	r24, 0x0F	; 15
 62c:	90 e0       	ldi	r25, 0x00	; 0
		if (i == 0x07)
 62e:	87 30       	cpi	r24, 0x07	; 7
 630:	91 05       	cpc	r25, r1
 632:	a1 f6       	brne	.-88     	; 0x5dc <write_new_time+0x78>
 634:	b1 cf       	rjmp	.-158    	; 0x598 <write_new_time+0x34>

00000636 <main>:
		_delay_ms(100);
	}
	
}
int main()
{
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
 63a:	cd b7       	in	r28, 0x3d	; 61
 63c:	de b7       	in	r29, 0x3e	; 62
 63e:	2c 97       	sbiw	r28, 0x0c	; 12
 640:	0f b6       	in	r0, 0x3f	; 63
 642:	f8 94       	cli
 644:	de bf       	out	0x3e, r29	; 62
 646:	0f be       	out	0x3f, r0	; 63
 648:	cd bf       	out	0x3d, r28	; 61
	DDRA=0x00;
 64a:	1a ba       	out	0x1a, r1	; 26
	PORTA =0xff;
 64c:	8f ef       	ldi	r24, 0xFF	; 255
 64e:	8b bb       	out	0x1b, r24	; 27
	DDRC=0xff;
 650:	84 bb       	out	0x14, r24	; 20
	PORTC=0xff;
 652:	85 bb       	out	0x15, r24	; 21
 654:	2f e9       	ldi	r18, 0x9F	; 159
 656:	86 e8       	ldi	r24, 0x86	; 134
 658:	91 e0       	ldi	r25, 0x01	; 1
 65a:	21 50       	subi	r18, 0x01	; 1
 65c:	80 40       	sbci	r24, 0x00	; 0
 65e:	90 40       	sbci	r25, 0x00	; 0
 660:	e1 f7       	brne	.-8      	; 0x65a <main+0x24>
 662:	00 c0       	rjmp	.+0      	; 0x664 <main+0x2e>
 664:	00 00       	nop

	//Wait Util Other device startup
	_delay_ms(500);

	//Initialize the LCD Module
	LCDInit(LS_NONE);
 666:	80 e0       	ldi	r24, 0x00	; 0
 668:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCDInit>
	DDRB|=(1<<PB3);
 66c:	bb 9a       	sbi	0x17, 3	; 23
	PORTB|=(1<<PB3);
 66e:	c3 9a       	sbi	0x18, 3	; 24
	LCDWriteString("LCD_initialized!");
 670:	89 ea       	ldi	r24, 0xA9	; 169
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	0e 94 99 02 	call	0x532	; 0x532 <LCDWriteString>
 678:	2f eb       	ldi	r18, 0xBF	; 191
 67a:	87 e2       	ldi	r24, 0x27	; 39
 67c:	99 e0       	ldi	r25, 0x09	; 9
 67e:	21 50       	subi	r18, 0x01	; 1
 680:	80 40       	sbci	r24, 0x00	; 0
 682:	90 40       	sbci	r25, 0x00	; 0
 684:	e1 f7       	brne	.-8      	; 0x67e <main+0x48>
 686:	00 c0       	rjmp	.+0      	; 0x688 <main+0x52>
 688:	00 00       	nop
	//ClockInit();
	//LCDWriteStringXY(0,1,"clock_init");
	//_delay_ms(1000);
	//Initialize the Clock Module
	
	if(ClockInit()==0)
 68a:	0e 94 41 00 	call	0x82	; 0x82 <ClockInit>
 68e:	81 11       	cpse	r24, r1
 690:	11 c0       	rjmp	.+34     	; 0x6b4 <main+0x7e>
	{
		//If we fail to initialize then warn user
		LCDClear();
 692:	60 e0       	ldi	r22, 0x00	; 0
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	0e 94 4a 02 	call	0x494	; 0x494 <LCDByte>
		LCDWriteString("Error !");
 69a:	8a eb       	ldi	r24, 0xBA	; 186
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	0e 94 99 02 	call	0x532	; 0x532 <LCDWriteString>
		LCDWriteStringXY(0,1,"DS1307 Not Found");
 6a2:	61 e0       	ldi	r22, 0x01	; 1
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	0e 94 a9 02 	call	0x552	; 0x552 <LCDGotoXY>
 6aa:	82 ec       	ldi	r24, 0xC2	; 194
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	0e 94 99 02 	call	0x532	; 0x532 <LCDWriteString>
 6b2:	ff cf       	rjmp	.-2      	; 0x6b2 <main+0x7c>

		while(1); //Halt
	}
	
	write_new_time();
 6b4:	0e 94 b2 02 	call	0x564	; 0x564 <write_new_time>
	//Now Read and display time
	
	while(1)
	{
		
		GetTimeString(Time);
 6b8:	ce 01       	movw	r24, r28
 6ba:	01 96       	adiw	r24, 0x01	; 1
 6bc:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <GetTimeString>
		LCDClear();
 6c0:	60 e0       	ldi	r22, 0x00	; 0
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	0e 94 4a 02 	call	0x494	; 0x494 <LCDByte>
		LCDWriteString("AVR_Rocks!!!");
 6c8:	83 ed       	ldi	r24, 0xD3	; 211
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	0e 94 99 02 	call	0x532	; 0x532 <LCDWriteString>
		LCDWriteStringXY(3,1,Time);
 6d0:	61 e0       	ldi	r22, 0x01	; 1
 6d2:	83 e0       	ldi	r24, 0x03	; 3
 6d4:	0e 94 a9 02 	call	0x552	; 0x552 <LCDGotoXY>
 6d8:	ce 01       	movw	r24, r28
 6da:	01 96       	adiw	r24, 0x01	; 1
 6dc:	0e 94 99 02 	call	0x532	; 0x532 <LCDWriteString>
		
		LCDGotoXY(17,1);
 6e0:	61 e0       	ldi	r22, 0x01	; 1
 6e2:	81 e1       	ldi	r24, 0x11	; 17
 6e4:	0e 94 a9 02 	call	0x552	; 0x552 <LCDGotoXY>
 6e8:	2f e9       	ldi	r18, 0x9F	; 159
 6ea:	86 e8       	ldi	r24, 0x86	; 134
 6ec:	91 e0       	ldi	r25, 0x01	; 1
 6ee:	21 50       	subi	r18, 0x01	; 1
 6f0:	80 40       	sbci	r24, 0x00	; 0
 6f2:	90 40       	sbci	r25, 0x00	; 0
 6f4:	e1 f7       	brne	.-8      	; 0x6ee <main+0xb8>
 6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <main+0xc2>
 6f8:	00 00       	nop
 6fa:	de cf       	rjmp	.-68     	; 0x6b8 <main+0x82>

000006fc <_exit>:
 6fc:	f8 94       	cli

000006fe <__stop_program>:
 6fe:	ff cf       	rjmp	.-2      	; 0x6fe <__stop_program>
