
serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  000002c6  0000033a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fce  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000088a  00000000  00000000  0000143e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000075c  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00002424  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d0  00000000  00000000  00002528  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000893  00000000  00000000  000028f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000318b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3b       	cpi	r26, 0xB2	; 178
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 0e 01 	call	0x21c	; 0x21c <main>
  7a:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCDBusyLoop>:
	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
	}
}
  82:	87 b3       	in	r24, 0x17	; 23
  84:	8f 70       	andi	r24, 0x0F	; 15
  86:	87 bb       	out	0x17, r24	; 23
  88:	c1 9a       	sbi	0x18, 1	; 24
  8a:	c0 98       	cbi	0x18, 0	; 24
  8c:	00 00       	nop
  8e:	c2 9a       	sbi	0x18, 2	; 24
  90:	00 00       	nop
  92:	86 b3       	in	r24, 0x16	; 22
  94:	80 7f       	andi	r24, 0xF0	; 240
  96:	00 00       	nop
  98:	c2 98       	cbi	0x18, 2	; 24
  9a:	00 00       	nop
  9c:	c2 9a       	sbi	0x18, 2	; 24
  9e:	00 00       	nop
  a0:	96 b3       	in	r25, 0x16	; 22
  a2:	00 00       	nop
  a4:	c2 98       	cbi	0x18, 2	; 24
  a6:	00 00       	nop
  a8:	88 23       	and	r24, r24
  aa:	8c f3       	brlt	.-30     	; 0x8e <LCDBusyLoop+0xc>
  ac:	c1 98       	cbi	0x18, 1	; 24
  ae:	87 b3       	in	r24, 0x17	; 23
  b0:	80 6f       	ori	r24, 0xF0	; 240
  b2:	87 bb       	out	0x17, r24	; 23
  b4:	08 95       	ret

000000b6 <LCDByte>:
  b6:	38 2f       	mov	r19, r24
  b8:	32 95       	swap	r19
  ba:	3f 70       	andi	r19, 0x0F	; 15
  bc:	98 2f       	mov	r25, r24
  be:	9f 70       	andi	r25, 0x0F	; 15
  c0:	61 11       	cpse	r22, r1
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <LCDByte+0x12>
  c4:	c0 98       	cbi	0x18, 0	; 24
  c6:	01 c0       	rjmp	.+2      	; 0xca <LCDByte+0x14>
  c8:	c0 9a       	sbi	0x18, 0	; 24
  ca:	00 00       	nop
  cc:	c2 9a       	sbi	0x18, 2	; 24
  ce:	28 b3       	in	r18, 0x18	; 24
  d0:	82 2f       	mov	r24, r18
  d2:	8f 70       	andi	r24, 0x0F	; 15
  d4:	40 e1       	ldi	r20, 0x10	; 16
  d6:	34 9f       	mul	r19, r20
  d8:	90 01       	movw	r18, r0
  da:	11 24       	eor	r1, r1
  dc:	28 2b       	or	r18, r24
  de:	28 bb       	out	0x18, r18	; 24
  e0:	00 00       	nop
  e2:	c2 98       	cbi	0x18, 2	; 24
  e4:	00 00       	nop
  e6:	c2 9a       	sbi	0x18, 2	; 24
  e8:	88 b3       	in	r24, 0x18	; 24
  ea:	28 2f       	mov	r18, r24
  ec:	2f 70       	andi	r18, 0x0F	; 15
  ee:	30 e1       	ldi	r19, 0x10	; 16
  f0:	93 9f       	mul	r25, r19
  f2:	c0 01       	movw	r24, r0
  f4:	11 24       	eor	r1, r1
  f6:	82 2b       	or	r24, r18
  f8:	88 bb       	out	0x18, r24	; 24
  fa:	00 00       	nop
  fc:	c2 98       	cbi	0x18, 2	; 24
  fe:	00 00       	nop
 100:	0e 94 41 00 	call	0x82	; 0x82 <LCDBusyLoop>
 104:	08 95       	ret

00000106 <LCDWriteString>:
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	8c 01       	movw	r16, r24
 110:	fc 01       	movw	r30, r24
 112:	80 81       	ld	r24, Z
 114:	88 23       	and	r24, r24
 116:	09 f1       	breq	.+66     	; 0x15a <LCDWriteString+0x54>
 118:	85 32       	cpi	r24, 0x25	; 37
 11a:	a9 f4       	brne	.+42     	; 0x146 <LCDWriteString+0x40>
 11c:	e8 01       	movw	r28, r16
 11e:	21 96       	adiw	r28, 0x01	; 1
 120:	f8 01       	movw	r30, r16
 122:	81 81       	ldd	r24, Z+1	; 0x01
 124:	80 53       	subi	r24, 0x30	; 48
 126:	88 30       	cpi	r24, 0x08	; 8
 128:	20 f4       	brcc	.+8      	; 0x132 <LCDWriteString+0x2c>
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCDByte>
 130:	0e c0       	rjmp	.+28     	; 0x14e <LCDWriteString+0x48>
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	85 e2       	ldi	r24, 0x25	; 37
 136:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCDByte>
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	f8 01       	movw	r30, r16
 13e:	81 81       	ldd	r24, Z+1	; 0x01
 140:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCDByte>
 144:	04 c0       	rjmp	.+8      	; 0x14e <LCDWriteString+0x48>
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCDByte>
 14c:	e8 01       	movw	r28, r16
 14e:	8e 01       	movw	r16, r28
 150:	0f 5f       	subi	r16, 0xFF	; 255
 152:	1f 4f       	sbci	r17, 0xFF	; 255
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	81 11       	cpse	r24, r1
 158:	df cf       	rjmp	.-66     	; 0x118 <LCDWriteString+0x12>
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	1f 91       	pop	r17
 160:	0f 91       	pop	r16
 162:	08 95       	ret

00000164 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 164:	84 31       	cpi	r24, 0x14	; 20
 166:	78 f4       	brcc	.+30     	; 0x186 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
 168:	62 30       	cpi	r22, 0x02	; 2
 16a:	31 f0       	breq	.+12     	; 0x178 <LCDGotoXY+0x14>
 16c:	63 30       	cpi	r22, 0x03	; 3
 16e:	31 f0       	breq	.+12     	; 0x17c <LCDGotoXY+0x18>
 170:	61 30       	cpi	r22, 0x01	; 1
 172:	29 f4       	brne	.+10     	; 0x17e <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 174:	80 64       	ori	r24, 0x40	; 64
			break;
 176:	03 c0       	rjmp	.+6      	; 0x17e <LCDGotoXY+0x1a>
		case 2:
			x+=0x14;
 178:	8c 5e       	subi	r24, 0xEC	; 236
			break;
 17a:	01 c0       	rjmp	.+2      	; 0x17e <LCDGotoXY+0x1a>
		case 3:
			x+=0x54;
 17c:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	80 68       	ori	r24, 0x80	; 128
 182:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCDByte>
 186:	08 95       	ret

00000188 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	8b e4       	ldi	r24, 0x4B	; 75
 194:	9d e1       	ldi	r25, 0x1D	; 29
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <LCDInit+0xe>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <LCDInit+0x14>
 19c:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 19e:	87 b3       	in	r24, 0x17	; 23
 1a0:	80 6f       	ori	r24, 0xF0	; 240
 1a2:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
 1a4:	ba 9a       	sbi	0x17, 2	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 1a6:	b8 9a       	sbi	0x17, 0	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 1a8:	b9 9a       	sbi	0x17, 1	; 23

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 1aa:	88 b3       	in	r24, 0x18	; 24
 1ac:	8f 70       	andi	r24, 0x0F	; 15
 1ae:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
 1b0:	c2 98       	cbi	0x18, 2	; 24
	CLEAR_RW();
 1b2:	c1 98       	cbi	0x18, 1	; 24
	CLEAR_RS();
 1b4:	c0 98       	cbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b6:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 1b8:	c2 9a       	sbi	0x18, 2	; 24
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 1ba:	c5 9a       	sbi	0x18, 5	; 24
 1bc:	00 00       	nop
	_delay_us(1);
	CLEAR_E();
 1be:	c2 98       	cbi	0x18, 2	; 24
 1c0:	00 00       	nop
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 1c2:	0e 94 41 00 	call	0x82	; 0x82 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	8c 2f       	mov	r24, r28
 1ca:	8c 60       	ori	r24, 0x0C	; 12
 1cc:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	88 e2       	ldi	r24, 0x28	; 40
 1d4:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	80 e4       	ldi	r24, 0x40	; 64
 1dc:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCDByte>
 1e0:	c0 e6       	ldi	r28, 0x60	; 96
 1e2:	d0 e0       	ldi	r29, 0x00	; 0
 1e4:	00 ea       	ldi	r16, 0xA0	; 160
 1e6:	10 e0       	ldi	r17, 0x00	; 0

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
 1e8:	61 e0       	ldi	r22, 0x01	; 1
 1ea:	89 91       	ld	r24, Y+
 1ec:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
 1f0:	c0 17       	cp	r28, r16
 1f2:	d1 07       	cpc	r29, r17
 1f4:	c9 f7       	brne	.-14     	; 0x1e8 <LCDInit+0x60>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	0e 94 b2 00 	call	0x164	; 0x164 <LCDGotoXY>

}
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	08 95       	ret

00000208 <usart_init>:
#include <util/delay.h>
#include <lcd.h>

void usart_init(char baud)                              // initialsation of usart
{
	UBRRL=baud;                                        // setting the baud rate
 208:	89 b9       	out	0x09, r24	; 9
	UCSRB=(1<<RXEN)|(1<<TXEN);//|(1<<RXCIE);              // enable transmiter & receiver, along with Rx intrrupt
 20a:	88 e1       	ldi	r24, 0x18	; 24
 20c:	8a b9       	out	0x0a, r24	; 10
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);        // 1 stop bit, 8 bit per character
 20e:	86 e8       	ldi	r24, 0x86	; 134
 210:	80 bd       	out	0x20, r24	; 32
 212:	08 95       	ret

00000214 <transmit_data>:
}

void transmit_data( unsigned char data)                 // function to transmit data
{
	while(!(UCSRA & (1<<UDRE)));                       // wait for empty transmit buffer
 214:	5d 9b       	sbis	0x0b, 5	; 11
 216:	fe cf       	rjmp	.-4      	; 0x214 <transmit_data>
	UDR=data;                                      // sending data
 218:	8c b9       	out	0x0c, r24	; 12
 21a:	08 95       	ret

0000021c <main>:
}


int main(void)
{
	DDRB|=(1<<PB3);
 21c:	bb 9a       	sbi	0x17, 3	; 23
	PORTB|=(1<<PB3);
 21e:	c3 9a       	sbi	0x18, 3	; 24
	char data = 'c';
	LCDInit(LS_NONE);
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	0e 94 c4 00 	call	0x188	; 0x188 <LCDInit>

	LCDClear();
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCDByte>
	LCDWriteString("AVR_UART");
 22e:	80 ea       	ldi	r24, 0xA0	; 160
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 83 00 	call	0x106	; 0x106 <LCDWriteString>
	LCDWriteStringXY(0,1,"Tx_chk!!");//
 236:	61 e0       	ldi	r22, 0x01	; 1
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	0e 94 b2 00 	call	0x164	; 0x164 <LCDGotoXY>
 23e:	89 ea       	ldi	r24, 0xA9	; 169
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 83 00 	call	0x106	; 0x106 <LCDWriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 246:	2f e3       	ldi	r18, 0x3F	; 63
 248:	82 e4       	ldi	r24, 0x42	; 66
 24a:	9f e0       	ldi	r25, 0x0F	; 15
 24c:	21 50       	subi	r18, 0x01	; 1
 24e:	80 40       	sbci	r24, 0x00	; 0
 250:	90 40       	sbci	r25, 0x00	; 0
 252:	e1 f7       	brne	.-8      	; 0x24c <main+0x30>
 254:	00 c0       	rjmp	.+0      	; 0x256 <main+0x3a>
 256:	00 00       	nop

	_delay_ms(5000);
	LCDClear();
 258:	60 e0       	ldi	r22, 0x00	; 0
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCDByte>
	
	usart_init(51);// baudrate set to 1200,  baud_rate_factor = (F_CPU)/ (16 x baud rate) - 1 = (1MHz)/(16 x 1200)  -  1  = 51
 260:	83 e3       	ldi	r24, 0x33	; 51
 262:	0e 94 04 01 	call	0x208	; 0x208 <usart_init>

	while (1)
	{
		LCDGotoXY(0,0);
 266:	60 e0       	ldi	r22, 0x00	; 0
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	0e 94 b2 00 	call	0x164	; 0x164 <LCDGotoXY>
		LCDData(data);
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	83 e6       	ldi	r24, 0x63	; 99
 272:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCDByte>
		transmit_data(data);
 276:	83 e6       	ldi	r24, 0x63	; 99
 278:	0e 94 0a 01 	call	0x214	; 0x214 <transmit_data>
 27c:	2f e3       	ldi	r18, 0x3F	; 63
 27e:	8d e0       	ldi	r24, 0x0D	; 13
 280:	93 e0       	ldi	r25, 0x03	; 3
 282:	21 50       	subi	r18, 0x01	; 1
 284:	80 40       	sbci	r24, 0x00	; 0
 286:	90 40       	sbci	r25, 0x00	; 0
 288:	e1 f7       	brne	.-8      	; 0x282 <main+0x66>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <main+0x70>
 28c:	00 00       	nop
		_delay_ms(1000);
		data++;
 28e:	c4 e6       	ldi	r28, 0x64	; 100
	
	usart_init(51);// baudrate set to 1200,  baud_rate_factor = (F_CPU)/ (16 x baud rate) - 1 = (1MHz)/(16 x 1200)  -  1  = 51

	while (1)
	{
		LCDGotoXY(0,0);
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	0e 94 b2 00 	call	0x164	; 0x164 <LCDGotoXY>
		LCDData(data);
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	8c 2f       	mov	r24, r28
 29c:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCDByte>
		transmit_data(data);
 2a0:	8c 2f       	mov	r24, r28
 2a2:	0e 94 0a 01 	call	0x214	; 0x214 <transmit_data>
 2a6:	2f e3       	ldi	r18, 0x3F	; 63
 2a8:	8d e0       	ldi	r24, 0x0D	; 13
 2aa:	93 e0       	ldi	r25, 0x03	; 3
 2ac:	21 50       	subi	r18, 0x01	; 1
 2ae:	80 40       	sbci	r24, 0x00	; 0
 2b0:	90 40       	sbci	r25, 0x00	; 0
 2b2:	e1 f7       	brne	.-8      	; 0x2ac <main+0x90>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <main+0x9a>
 2b6:	00 00       	nop
		_delay_ms(1000);
		data++;
 2b8:	cf 5f       	subi	r28, 0xFF	; 255
		if(data>125)
 2ba:	ce 37       	cpi	r28, 0x7E	; 126
 2bc:	48 f3       	brcs	.-46     	; 0x290 <main+0x74>
		{
			data = 33;
 2be:	c1 e2       	ldi	r28, 0x21	; 33
 2c0:	e7 cf       	rjmp	.-50     	; 0x290 <main+0x74>

000002c2 <_exit>:
 2c2:	f8 94       	cli

000002c4 <__stop_program>:
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <__stop_program>
