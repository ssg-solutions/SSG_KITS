
key.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000134  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000134  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000637  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000594  00000000  00000000  00000883  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000231  00000000  00000000  00000e17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001048  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e9  00000000  00000000  0000108c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f9  00000000  00000000  00001375  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000146e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 6f 00 	call	0xde	; 0xde <main>
  7a:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <GetKeyPressed>:
#include <util/delay.h>

uint8_t GetKeyPressed()
{
	uint8_t r,c;
	PORTB|= 0XF0;
  82:	88 b3       	in	r24, 0x18	; 24
  84:	80 6f       	ori	r24, 0xF0	; 240
  86:	88 bb       	out	0x18, r24	; 24
  88:	20 e0       	ldi	r18, 0x00	; 0
  8a:	30 e0       	ldi	r19, 0x00	; 0
	for(c=0;c<4;c++)
	{
		DDRB&=~(0XFF);
		DDRB|=(0X01 << c);
  8c:	e1 e0       	ldi	r30, 0x01	; 1
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	62 2f       	mov	r22, r18
{
	uint8_t r,c;
	PORTB|= 0XF0;
	for(c=0;c<4;c++)
	{
		DDRB&=~(0XFF);
  92:	87 b3       	in	r24, 0x17	; 23
  94:	17 ba       	out	0x17, r1	; 23
		DDRB|=(0X01 << c);
  96:	97 b3       	in	r25, 0x17	; 23
  98:	af 01       	movw	r20, r30
  9a:	02 2e       	mov	r0, r18
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <GetKeyPressed+0x20>
  9e:	44 0f       	add	r20, r20
  a0:	55 1f       	adc	r21, r21
  a2:	0a 94       	dec	r0
  a4:	e2 f7       	brpl	.-8      	; 0x9e <GetKeyPressed+0x1c>
  a6:	49 2b       	or	r20, r25
  a8:	47 bb       	out	0x17, r20	; 23
		for(r=0;r<4;r++)
		{
			if(!(PINB & (0X10 << r)))
  aa:	b4 9b       	sbis	0x16, 4	; 22
  ac:	0c c0       	rjmp	.+24     	; 0xc6 <GetKeyPressed+0x44>
  ae:	b5 9b       	sbis	0x16, 5	; 22
  b0:	06 c0       	rjmp	.+12     	; 0xbe <GetKeyPressed+0x3c>
  b2:	b6 9b       	sbis	0x16, 6	; 22
  b4:	06 c0       	rjmp	.+12     	; 0xc2 <GetKeyPressed+0x40>
  b6:	b7 99       	sbic	0x16, 7	; 22
  b8:	0b c0       	rjmp	.+22     	; 0xd0 <GetKeyPressed+0x4e>
	PORTB|= 0XF0;
	for(c=0;c<4;c++)
	{
		DDRB&=~(0XFF);
		DDRB|=(0X01 << c);
		for(r=0;r<4;r++)
  ba:	83 e0       	ldi	r24, 0x03	; 3
  bc:	05 c0       	rjmp	.+10     	; 0xc8 <GetKeyPressed+0x46>
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <GetKeyPressed+0x46>
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <GetKeyPressed+0x46>
  c6:	80 e0       	ldi	r24, 0x00	; 0
		{
			if(!(PINB & (0X10 << r)))
			{
				return (r+(c*4));
  c8:	66 0f       	add	r22, r22
  ca:	66 0f       	add	r22, r22
  cc:	86 0f       	add	r24, r22
  ce:	08 95       	ret
  d0:	2f 5f       	subi	r18, 0xFF	; 255
  d2:	3f 4f       	sbci	r19, 0xFF	; 255

uint8_t GetKeyPressed()
{
	uint8_t r,c;
	PORTB|= 0XF0;
	for(c=0;c<4;c++)
  d4:	24 30       	cpi	r18, 0x04	; 4
  d6:	31 05       	cpc	r19, r1
  d8:	d9 f6       	brne	.-74     	; 0x90 <GetKeyPressed+0xe>
			{
				return (r+(c*4));
			}
		}
	}
	return 0XFF;//Indicate No key pressed
  da:	8f ef       	ldi	r24, 0xFF	; 255
}
  dc:	08 95       	ret

000000de <main>:
	}
}
*/

int main(void)
{
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	60 97       	sbiw	r28, 0x10	; 16
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	f8 94       	cli
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0x0F; // Set PC0-PC3 as output
  f2:	8f e0       	ldi	r24, 0x0F	; 15
  f4:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00; // Initialize PORTC
  f6:	15 ba       	out	0x15, r1	; 21
	DDRC|=((1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3));
  f8:	84 b3       	in	r24, 0x14	; 20
  fa:	8f 60       	ori	r24, 0x0F	; 15
  fc:	84 bb       	out	0x14, r24	; 20
	PORTC&=~((1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3));
  fe:	85 b3       	in	r24, 0x15	; 21
 100:	80 7f       	andi	r24, 0xF0	; 240
 102:	85 bb       	out	0x15, r24	; 21
	char array_1[]={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
 104:	80 e1       	ldi	r24, 0x10	; 16
 106:	e0 e6       	ldi	r30, 0x60	; 96
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	de 01       	movw	r26, r28
 10c:	11 96       	adiw	r26, 0x01	; 1
 10e:	01 90       	ld	r0, Z+
 110:	0d 92       	st	X+, r0
 112:	8a 95       	dec	r24
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x30>
		
	uint8_t key;
	while(1)
	{
		key = GetKeyPressed(); // Get the keycode of pressed key
 116:	0e 94 41 00 	call	0x82	; 0x82 <GetKeyPressed>
		if(key <= 9) // Ensure only valid BCD values are sent
 11a:	8a 30       	cpi	r24, 0x0A	; 10
 11c:	e0 f7       	brcc	.-8      	; 0x116 <main+0x38>
		{
			PORTC = array_1[key];
 11e:	e1 e0       	ldi	r30, 0x01	; 1
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	ec 0f       	add	r30, r28
 124:	fd 1f       	adc	r31, r29
 126:	e8 0f       	add	r30, r24
 128:	f1 1d       	adc	r31, r1
 12a:	80 81       	ld	r24, Z
 12c:	85 bb       	out	0x15, r24	; 21
 12e:	f3 cf       	rjmp	.-26     	; 0x116 <main+0x38>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
